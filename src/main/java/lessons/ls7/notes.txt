                SOLID

SRP (Single-Responsibility Principle)
OCP (Open-Closed Principle)
LSP (Liskov-Substitution Principle)
ISP (Interface Segregation Principle)
DIP (Dependency inversion Principle)

    SRP (Single-Responsibility Principle - Принцип єдиної відповідальності)
Кожен об'єк повинен виконувати лишень одну дію.
Кожен клас повинен вирішувати тільки одну задачу (проблему)

    OCP (Open-Closed Principle - принцип відкритості-закритості)
Клас повинен бути відкритий для розширення, але закритий для модифікацій.
Використання поліморфізму.

    LSP (Liskov-Substitution Principle - Принцип підстановки Барбари Лісков)
Потрібно, щоб підкласи могли служити заміною для своїх суперкласів.
Якщо в коді виникає необхідність визначення типу, то тоді даний принцип порушується.
Використання поліморфізму.

    ISP (Interface Segregation Principle - Принцип розподілу інтерфейсів)
Використовувати вузько спеціалізовані інтерфейси, призначені для конкретного клієнта.
Клієнти не повинні залеєжати від інтерфейсів, які вони не викорстовуєть.
Замітка: Як омога більше дробити інтерфейси.
         Інтерфейс не повинен мати надлишковий функціонал.
         Частково пов'язаний із Single-Responsibility Principle


    DIP (Dependency inversion Principle - Принцип інверсії залежностей)
Об'єктом залежності повинена бути абстракція, а не щось конкретне.
1. Модулі вищих рівнів не повинні залежати від модулів нищих рівнів.
2. Абстракція не повинна залежати від деталей. Деталі повинні залежати від абстракції
Абстракції не повинні залежати на реалізації, а реалізації повинні залежати на абстракції.
Інтерфейси високого рівня, повинні описувати  лише загальну поведінку, в той час як інтерфейси низького рівня конкретні деталі абстракції.
    Усе повинно бути на рівні абстракції.
    Не можна щоб модуль нищого рівня орудував молулем вищого рівня.
    Це поєднання: OCP (принцип відкритості-закритості) та LSP (Liskov-Substitution Principle - Принцип підстановки Барбари Лісков);
